#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
shell sort
~~~~~~~~~~

希尔排序，也称递减增量排序算法，实质是分组插入排序。
由 Donald Shell 于1959年提出。希尔排序是非稳定排序算法。

希尔排序的基本思想是：将数组列在一个表中并对列分别进行插入排序，
重复这过程，不过每次用更长的列（步长更长了，列数更少了）来进行。
最后整个表就只有一列了。将数组转换至表是为了更好地理解这算法，
算法本身还是使用数组进行排序。

例如，假设有这样一组数[ 13 14 94 33 82 25 59 94 65 23 45 27 73 25 39 10 ]，
如果我们以步长为5开始进行排序，我们可以通过将这列表放在有5列的表中来更好地描述算法，
这样他们就应该看起来是这样：

13 14 94 33 82
25 59 94 65 23
45 27 73 25 39
10
然后我们对每列进行排序：

10 14 73 25 23
13 27 94 33 39
25 59 94 65 82
45
将上述四行数字，依序接在一起时我们得到：
[ 10 14 73 25 23 13 27 94 33 39 25 59 94 65 82 45 ]。
这时10已经移至正确位置了，然后再以3为步长进行排序：

10 14 73
25 23 13
27 94 33
39 25 59
94 65 82
45
排序之后变为：

10 14 13
25 23 33
27 25 59
39 65 73
45 94 82
94
最后以1步长进行排序（此时就是简单的插入排序了）。

"""


def shell_sort(arry):
    n = len(arry)
    gap = round(n/2)          #初始步长 , 用round四舍五入取整
    while gap > 0:
        for i in range(gap, n):    #每一列进行插入排序 , 从gap 到 n-1
            temp = arry[i]
            j = i
            while (j >= gap and arry[j-1] > temp):   #插入排序
                arry[j] = arry[j-gap]
                j = j - gap
            arry[j] = temp
        gap = round(gap/2)      #重新设置步长
    return arry
